// pragma circom 2.0.0;
// include "circomlib/circuits/mimcsponge.circom";

// template HashLeftRight() {
//   signal input left;
//   signal input right;

//   signal output out;

//   component hasher = MiMCSponge(2, 220, 1);
//   left ==> hasher.ins[0];
//   right ==> hasher.ins[1];
//   hasher.k <== 0;
//   out <== hasher.outs[0];
// }

// template HashedLeaf() {

//     signal input in;
//     signal output out;

//     component hash = MiMCSponge(1, 220, 1);
//     hash.ins[0] <== in;
// 		hash.k <== 0;

//     out <== hash.outs[0];
// }

// template GetMerkelRoot(N) {
// 	signal input leaves[N];
// 	signal output root;
// 	component hashedLeaves[N];
// 	component intermediateHashes[N];
// 	signal hashes[2*N];

// 	// hash all leave values
// 	for (var i = 0; i < N; i++) {
// 			hashedLeaves[i] = HashedLeaf();
// 			hashedLeaves[i].in <== leaves[i];
// 			hashes[i] <== hashedLeaves[i].out;
//   }

// 	var n = N;
// 	var offset = 0;
// 	var counter = 0;

// 	// calculate merkle tree hashes
// 	while (n > 0) {
// 			for (var i = 0; i < n - 1; i += 2) {
// 				intermediateHashes[counter] = HashLeftRight();
// 				intermediateHashes[counter].left <==
// hashes[offset+i]; 				intermediateHashes[counter].right <== hashes[offset+i+1];
// 				hashes[n+offset+i/2] <==
// intermediateHashes[counter].out; 				counter = counter + 1;
// 			}
// 			offset += n;
// 			n = n / 2;
// 	}

// 	root <== hashes[2*N-1];
// }

// component main = GetMerkelRoot(4);